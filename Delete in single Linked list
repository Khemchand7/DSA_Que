#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;

    Node()
    {
        // cout << "default constructor called" << endl;
        this->data = 0;
        this->next = NULL;
    }
    Node(int data)
    {
        // cout << "param constructor called" << endl;
        this->data = data;
        this->next = NULL;
    }
};

void printLL(Node *&head)
{
    Node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
}

int getLength(Node *&head)
{
    Node *temp = head;
    int count = 0;
    while (temp != NULL)
    {
        count++;
        temp = temp->next;
    }
    return count;
}

void insertAtHead(Node *&head, Node *&tail, int data)
{
    if (head == NULL)
    {
        Node *newNode = new Node(data);
        head = newNode;
        tail = newNode;
        return;
    }

    Node *temp = head;

    // create a new node
    Node *newNode = new Node(data);

    // new node ko attach karna hai head node se
    newNode->next = temp;
    // update head
    head = newNode;
}

void insertAtTail(Node *&head, Node *&tail, int data)
{

    if (head == NULL)
    {
        Node *newNode = new Node(data);
        head = newNode;
        tail = newNode;
        return;
    }

    Node *newNode = new Node(data);
    // attach new node to the tail
    tail->next = newNode;
    // update tail
    tail = newNode;
}

void insertAtPosition(Node *&head,Node *&tail,int data, int position){
    if(position == 1){
        insertAtHead(head, tail, data);
    }
    else if(position > getLength(head)){//yahan pr equals to nhi aaega kyuki position == length ka matlab ki wo last wale se pehle aaega 
        insertAtTail(head, tail, data);
    }
    else{
        Node *newNode = new Node(data);
        Node *previous = NULL;
        Node *curr = head;
        // given position ko reach karenge assume kia hai ki starting position 4 se ki to --karenge aur jab 1 par honge to 4th position hogi
        while(position != 1){
            previous = curr;
            curr = curr->next;
            position--;
        }
        //position jahan pr insert karna hai reached
        //atttatch karna hai 
        previous->next = newNode;
        newNode->next = curr;

    }
}


void insertAtPosition2(Node *&head,Node *&tail,int data, int position){
    if(position == 1){
        insertAtHead(head, tail, data);
    }
    else if(position > getLength(head)){//yahan pr equals to nhi aaega kyuki position == length ka matlab ki wo last wale se pehle aaega 
        insertAtTail(head, tail, data);
    }
    else{
        Node *newNode = new Node(data);
        Node *previous = head;
        // Node *curr = head;
        // given position ko reach karenge assume kia hai ki starting position 4 se ki to --karenge aur jab 1 par honge to 4th position hogi
        int count = 1;
        while(count < position - 1){//= nhi aaega kyuki wo last wale pr pahuch jaega warna
            previous = previous->next;
            count++;
        }
        //position jahan pr insert karna hai reached
        //atttatch karna hai 
        newNode->next = previous->next;
        previous->next = newNode;

    }
}

void deleteAtHead(Node *&head, Node *&tail){
        Node *temp = head;
        head = head->next;
        temp->next = NULL;
        delete temp;
}

void deleteAtTail(Node *&head, Node *&tail){
        Node *prevNode = NULL;
        Node *currNode = head;
        while(currNode!=tail){
            prevNode = currNode;
            currNode = currNode -> next;
        }
        prevNode->next = NULL;
        delete currNode;
        tail = prevNode;
}

void deleteAtPostion(Node *&head, Node *&tail, int position){
    if(head == NULL){
        //empty linked list
        cout<<"deletion is not possible in empty linked list";
        return;
    }
    if(head == tail){
        //single element
        Node *temp = head;
        delete temp;
        head = NULL;
        tail = NULL;
        return;
    }
    if(position == 1){
        //delete at head
        deleteAtHead(head,tail);
    }
    else if(position == getLength(head)){
        //delete at tail
        deleteAtTail(head,tail);
    }
    else{
        //delete in middle
        Node *prevNode = NULL;
        Node *currNode = head;
        while(position != 1){
            prevNode = currNode;
            currNode = currNode->next;
            position--;
        }
        prevNode->next = currNode->next;
        currNode->next = NULL;
        delete currNode; 
    }
}

int main()
{
    Node *head = NULL;
    Node *tail = NULL;

    insertAtHead(head, tail, 10);
    insertAtTail(head, tail, 20);
    insertAtTail(head, tail, 30);
    insertAtTail(head, tail, 40);
    insertAtTail(head, tail, 50);
    printLL(head);
    cout<<endl;
    deleteAtPostion(head, tail, 2);
    printLL(head);
    cout<<endl;
    cout << getLength(head);


    return 0;
}
