#include <iostream> 
using namespace std; 

int findOddOccuringElement(int arr[],int n){
    int s=0;
    int e=n-1;
    int mid=s+(e-s)/2;
    while(s<=e){
        if(s==e){
            return s;
        }
        if((mid & 1)==0){
            if(arr[mid]==arr[mid+1]){
                s=mid+2;
            }
            else{
                e=mid;
            }
        }
        else if((mid & 1)==1){
            if(arr[mid]==arr[mid-1]){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        mid=s+(e-s)/2;
    }
    return -1;  // If no odd occurring element found 
}

// Driver Code 
int main() 
{ 
	//int arr[] = {10,10,2,2,5,5,2,5,5,20,20,11,11,10,10}; 
    //int arr[] = {1, 1, 2, 2, 1, 1, 2, 2, 13, 1, 1, 40, 40, 13, 13};
    int arr[] = {1, 1, 2, 2, 3, 3, 4, 4, 3, 600, 600, 4, 4};
    int n = sizeof(arr) / sizeof(arr[0]); 
    int result = findOddOccuringElement(arr, n); 
    cout << "The odd occurring element is at :" << result << " value is :"<<arr[result] <<endl; 
    return 0; 
} 

//Que:
<!-- Find the odd appearing element in O(Log n) time
Given an array where all elements appear even number of times except one. 
All repeating occurrences of elements appear in pairs and these pairs are not adjacent (there cannot be more than two consecutive occurrences of any element). 
Find the element that appears odd number of times. 
Note that input like {2, 2, 1, 2, 2, 1, 1} is valid as all repeating occurrences occur in pairs and these pairs are not adjacent. 
Input like {2, 1, 2} is invalid as repeating elements don’t appear in pairs. Also, input like {1, 2, 2, 2, 2} is invalid as two pairs of 2 are adjacent. 
Input like {2, 2, 2, 1} is also invalid as there are three consecutive occurrences of 2.

Example : 
Input: arr[] = {1, 1, 2, 2, 1, 1, 2, 2, 13, 1, 1, 40, 40, 13, 13}
Output: 13

Input: arr[] = {1, 1, 2, 2, 3, 3, 4, 4, 3, 600, 600, 4, 4}
Output: 3
We strongly recommend you to minimize your browser and try this yourself first.
A Simple Solution is to sort the array and then traverse the array from left to right. Since the array is sorted, we can easily figure out the required element. 
Time complexity of this solution is O(n Log n)
A Better Solution is to do XOR of all elements, result of XOR would give the odd appearing element. 
Time complexity of this solution is O(n). See XOR based solution for add appearing for more details.
An Efficient Solution can find the required element in O(Log n) time. The idea is to use Binary Search. Below is an observation in input array. 
Since the element appears odd number of times, there must be a single occurrence of the element. For example, in {2, 1, 1, 2, 2), 
the first 2 is the odd occurrence. So the idea is to find this odd occurrence using Binary Search. 
All elements before the odd occurrence have first occurrence at even index (0, 2, ..) and next occurrence at odd index (1, 3, …). 
And all elements afterhave first occurrence at odd index and next occurrence at even index.
1) Find the middle index, say ‘mid’.
2) If ‘mid’ is even, then compare arr[mid] and arr[mid + 1]. If both are same, then there is an odd occurrence of the element after ‘mid’ else before mid.
3) If ‘mid’ is odd, then compare arr[mid] and arr[mid – 1]. If both are same, then there is an odd occurrence after ‘mid’ else before mid.
 -->
