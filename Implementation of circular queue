#include<iostream>
using namespace std;
class circular_queue
{
public:
    int *arr;
    int front;
    int rear;
    int size;

    circular_queue(int size)
    {
        arr = new int(size);
        this->size = size;
        front = -1;
        rear = -1;
    }
    void push(int data)
    {
        if ((front == 0 && rear == size - 1) || (rear == (front - 1)))
        {
            cout << "queue overflow" << endl;
            return;
        }
        else if (front == -1 && rear == -1)
        {
            front++;
            rear++;
        }
        else if (rear == size - 1 && front > 0)//greater than 0 is confirming that queue is not full
        {
            rear = 0;
        }
        else
        {
            rear++;
        }
        arr[rear] = data;
    }
    void pop()
    {
        if (front == -1 && rear == -1)
        {
            cout<<"queue underflow"<<endl;
            return;
        }
        else if( front == rear){
            arr[front] = -1;
            front = -1;
            rear = -1;
        }
        else if(front == size -1)
        {
            arr[front] = -1;
            front = 0;
        }
        else{
            arr[front] = -1;
            front++;
        }
    }

    int getFront()
    {
        if (front == -1 && rear == -1)
        {
            cout << "queue is empty" << endl;
            return -1;
        }
        else
        {
            return arr[front];
        }
    }   

    int getRear()
    {
        if (front == -1 && rear == -1)
        {
            cout << "queue is empty" << endl;
            return -1;
        }
        else
        {
            return arr[rear];
        }
    }
    void print()
    {
        if (front == -1 && rear == -1)
        {
            cout << "queue is empty" << endl;
            return;
        }
        for (int i = front; i <= rear; i++)
        {
            cout << arr[i] << " ";
        }
        cout << endl;
        cout<<"front: "<<front<<" rear: "<<rear<<endl;
        
    }


};
int main()
{
    circular_queue cq(5);
    cq.push(10);
    cq.push(20);
    cq.push(30);
    cq.push(40);
    cq.push(50);
    cq.print();
    cq.pop();
    cq.pop();
    cq.pop();
    cq.push(60);
    cq.push(70);
    cq.push(80);
    cq.push(90);
    cq.print();
    return 0;
}
